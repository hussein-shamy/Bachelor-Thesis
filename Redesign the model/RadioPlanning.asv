classdef RadioPlanning

    methods (Static)

        function mobileStations = allocateMobileStationsFromCenter(mobileStations, centerBaseStation, interSiteDistance)
            % Function to assign random locations to mobile stations around a center base station
            % Returns the updated mobileStations array with locations assigned

            % Constants for cell radius calculation
            cellRadius = interSiteDistance * sqrt(3) / 2; % Hexagonal cell radius

            % Extract center base station location
            centerLocation = centerBaseStation.location;

            % Generate random offsets within the cell radius
            for i = 1:length(mobileStations)
                % Generate random radial distance within the cell radius
                r = cellRadius * sqrt(rand());

                % Generate random angle
                theta = 2 * pi * rand();

                % Calculate random offset in Cartesian coordinates
                offsetLat = r * cos(theta);
                offsetLon = r * sin(theta);

                % Calculate random location around the center base station
                randomLocation = centerLocation + [offsetLat, offsetLon];

                % Assign the random location to the mobile station
                mobileStations(i).location = randomLocation;
            end

        end


        function neighbouringSites = allocateNeighbouringSitesFromCenter(centerBaseStation, neighbouringSites, interSiteDistance)
            % Function to allocate neighboring sites around a center base station in a hexagonal shape
            % Inputs:
            %   - centerBaseStation: object with 'location' property [Latitude, Longitude]
            %   - neighbouringSites: array of objects with 'location' properties [Latitude, Longitude]
            %   - interSiteDistance: desired distance between neighboring sites
            % Output:
            %   - neighbouringSites: array of updated objects with assigned 'location' properties

            % Extract center location from center base station object
            centerLocation = centerBaseStation.location;

            % Constants for hexagonal shape
            hexDist = interSiteDistance; % Distance between center and neighboring sites

            % Calculate positions based on hexagonal grid
            % Sites are numbered clockwise from 1 to 6 around the center
            theta = pi/3 * (0:5); % Angles for hexagon points

            for i = 1:numel(neighbouringSites)
                % Calculate coordinates of each neighbouring site
                neighbouringSites(i).location = centerLocation + hexDist * [cos(theta(i)), sin(theta(i))];
            end
        end

        function [maxLat, maxLon] = calculateMaxRadiationDirection(neighbouringSites, isd)

            % Earth's radius in kilometers
            R = 6371;

            % Convert degrees to radians
            neighbouringSite = deg2rad(baseLat);
            baseLon = deg2rad(baseLon);
            azimuth = deg2rad(azimuth);
            tilt = deg2rad(tilt);

            % Calculate the displacement in the local tangent plane
            deltaX = isd/sqrt(3) * cos(tilt) * sin(azimuth);
            deltaY = isd/sqrt(3) * cos(tilt) * cos(azimuth);

            % Convert local tangent plane displacement to latitude and longitude
            deltaLat = deltaY / R;
            deltaLon = deltaX / (R * cos(baseLat));

            % Calculate the new latitude and longitude
            maxLat = baseLat + deltaLat;
            maxLon = baseLon + deltaLon;

            % Convert radians back to degrees
            maxLat = rad2deg(maxLat);
            maxLon = rad2deg(maxLon);
        end


    end
end
